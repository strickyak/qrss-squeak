/*
	Package font5x7 provides a simple 5x7 bitmap
	for 7-bit ascii characters ' ' to '~'.
*/
package font5x7

import "log"

var Font []byte

// SevenHorizontalRowsOfBool returns a slice of length 7 where each element is a slice of bool.
// The outer slice goes down, and the inner slices go across, to print like this (with '#' for true and '_' for false):
/*
#____________#_____________________________________________________##_____________________________#___
#____________#______________________________________________________#_____________________________#___
#______###__###_________##_#__#___#_______####___###___###__####____#____###_________####__###____#___
#_____#___#__#__________#_#_#_#___#_______#___#_#___#_#___#_#___#___#___#___#_______#___#_#___#___#___
#_____#####__#__________#_#_#__####_______####__#####_#___#_####____#___#####________####_#___#___#___
#_____#______#__#_______#___#_____#_______#_____#_____#___#_#_______#___#_______________#_#___#_______
#####__###____##________#___#__###________#______###___###__#______###___###__________##___###____#___
*/
func SevenHorizontalRowsOfBool(s string) [][]bool {
	var z [][]bool
	for row := 0; row < 7; row++ { // For row in 0..6 inclusive
		var y []bool
		for _, ascii := range s {
			if ascii < 32 || ascii > 127 {
				ascii = '?' // Replace non-printable-ascii with '?'
			}
			for col := 0; col < 5; col++ {
				rowBits := Font[5*(int(ascii)-32)+col]
				y = append(y, bool(0 != ((1<<uint(row))&rowBits)))
			}
			y = append(y, false)
		}
		z = append(z, y)
	}
	return z
}

// VerticalStringFiveBitsWide converts the ASCII string into bytes for a vertical banner
// with the letters written on top of each other going downward.
// See demo.go for an example of how to consume them.
func VerticalStringFiveBitsWide(s string) []byte {
	var z []byte
	for _, ascii := range s {
		if ascii < 32 || ascii > 127 {
			ascii = '?' // Replace non-printable-ascii with '?'
		}
		for row := 0; row < 8; row++ {
			var x byte
			for col := 0; col < 5; col++ {
				x = (x << 1)
				if Pixel(byte(ascii), row, col) {
					x |= 1
				}
			}
			z = append(z, x)
		}
		z = append(z, byte(0)) // Empty row after 7 rows of char pixels.
	}
	return z
}

func Pixel(ascii byte, row int, col int) bool {
	if row < 0 || row > 7 {
		log.Panicf("Expected 0 <= row <= 7; got row=%d", row)
	}
	if col < 0 || col > 4 {
		log.Panicf("Expected 0 <= col <= 4; got col=%d", col)
	}
	if ascii < 32 || ascii > 127 {
		return 0 != ((row & 1) ^ (col & 1)) // Checkerboard for bad ascii.
	}
	rowBits := Font[5*(int(ascii)-32)+col]
	return 0 != ((rowBits >> uint(row)) & 1)
}

// http://sunge.awardspace.com/glcd-sd/node4.html
//*****************************************************************************
//
// File Name	: 'font5x7.h'
// Title		: Graphic LCD Font (Ascii Charaters)
// Author		: Pascal Stang
// Date			: 10/19/2001
// Revised		: 10/19/2001
// Version		: 0.1
// Target MCU	: Atmel AVR
// Editor Tabs	: 4
//
//*****************************************************************************

func init() {
	Font = []byte{
		0x00, 0x00, 0x00, 0x00, 0x00, // (space)
		0x00, 0x00, 0x5F, 0x00, 0x00, // !
		0x00, 0x07, 0x00, 0x07, 0x00, // "
		0x14, 0x7F, 0x14, 0x7F, 0x14, // #
		0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
		0x23, 0x13, 0x08, 0x64, 0x62, // %
		0x36, 0x49, 0x55, 0x22, 0x50, // &
		0x00, 0x05, 0x03, 0x00, 0x00, // '
		0x00, 0x1C, 0x22, 0x41, 0x00, // (
		0x00, 0x41, 0x22, 0x1C, 0x00, // )
		0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
		0x08, 0x08, 0x3E, 0x08, 0x08, // +
		0x00, 0x50, 0x30, 0x00, 0x00, // ,
		0x08, 0x08, 0x08, 0x08, 0x08, // -
		0x00, 0x60, 0x60, 0x00, 0x00, // .
		0x20, 0x10, 0x08, 0x04, 0x02, // /
		0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
		0x00, 0x42, 0x7F, 0x40, 0x00, // 1
		0x42, 0x61, 0x51, 0x49, 0x46, // 2
		0x21, 0x41, 0x45, 0x4B, 0x31, // 3
		0x18, 0x14, 0x12, 0x7F, 0x10, // 4
		0x27, 0x45, 0x45, 0x45, 0x39, // 5
		0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
		0x01, 0x71, 0x09, 0x05, 0x03, // 7
		0x36, 0x49, 0x49, 0x49, 0x36, // 8
		0x06, 0x49, 0x49, 0x29, 0x1E, // 9
		0x00, 0x36, 0x36, 0x00, 0x00, // :
		0x00, 0x56, 0x36, 0x00, 0x00, // ;
		0x00, 0x08, 0x14, 0x22, 0x41, // <
		0x14, 0x14, 0x14, 0x14, 0x14, // =
		0x41, 0x22, 0x14, 0x08, 0x00, // >
		0x02, 0x01, 0x51, 0x09, 0x06, // ?
		0x32, 0x49, 0x79, 0x41, 0x3E, // @
		0x7E, 0x11, 0x11, 0x11, 0x7E, // A
		0x7F, 0x49, 0x49, 0x49, 0x36, // B
		0x3E, 0x41, 0x41, 0x41, 0x22, // C
		0x7F, 0x41, 0x41, 0x22, 0x1C, // D
		0x7F, 0x49, 0x49, 0x49, 0x41, // E
		0x7F, 0x09, 0x09, 0x01, 0x01, // F
		0x3E, 0x41, 0x41, 0x51, 0x32, // G
		0x7F, 0x08, 0x08, 0x08, 0x7F, // H
		0x00, 0x41, 0x7F, 0x41, 0x00, // I
		0x20, 0x40, 0x41, 0x3F, 0x01, // J
		0x7F, 0x08, 0x14, 0x22, 0x41, // K
		0x7F, 0x40, 0x40, 0x40, 0x40, // L
		0x7F, 0x02, 0x04, 0x02, 0x7F, // M
		0x7F, 0x04, 0x08, 0x10, 0x7F, // N
		0x3E, 0x41, 0x41, 0x41, 0x3E, // O
		0x7F, 0x09, 0x09, 0x09, 0x06, // P
		0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
		0x7F, 0x09, 0x19, 0x29, 0x46, // R
		0x46, 0x49, 0x49, 0x49, 0x31, // S
		0x01, 0x01, 0x7F, 0x01, 0x01, // T
		0x3F, 0x40, 0x40, 0x40, 0x3F, // U
		0x1F, 0x20, 0x40, 0x20, 0x1F, // V
		0x7F, 0x20, 0x18, 0x20, 0x7F, // W
		0x63, 0x14, 0x08, 0x14, 0x63, // X
		0x03, 0x04, 0x78, 0x04, 0x03, // Y
		0x61, 0x51, 0x49, 0x45, 0x43, // Z
		0x00, 0x00, 0x7F, 0x41, 0x41, // [
		0x02, 0x04, 0x08, 0x10, 0x20, // "\"
		0x41, 0x41, 0x7F, 0x00, 0x00, // ]
		0x04, 0x02, 0x01, 0x02, 0x04, // ^
		0x40, 0x40, 0x40, 0x40, 0x40, // _
		0x00, 0x01, 0x02, 0x04, 0x00, // `
		0x20, 0x54, 0x54, 0x54, 0x78, // a
		0x7F, 0x48, 0x44, 0x44, 0x38, // b
		0x38, 0x44, 0x44, 0x44, 0x20, // c
		0x38, 0x44, 0x44, 0x48, 0x7F, // d
		0x38, 0x54, 0x54, 0x54, 0x18, // e
		0x08, 0x7E, 0x09, 0x01, 0x02, // f
		0x08, 0x14, 0x54, 0x54, 0x3C, // g
		0x7F, 0x08, 0x04, 0x04, 0x78, // h
		0x00, 0x44, 0x7D, 0x40, 0x00, // i
		0x20, 0x40, 0x44, 0x3D, 0x00, // j
		0x00, 0x7F, 0x10, 0x28, 0x44, // k
		0x00, 0x41, 0x7F, 0x40, 0x00, // l
		0x7C, 0x04, 0x18, 0x04, 0x78, // m
		0x7C, 0x08, 0x04, 0x04, 0x78, // n
		0x38, 0x44, 0x44, 0x44, 0x38, // o
		0x7C, 0x14, 0x14, 0x14, 0x08, // p
		0x08, 0x14, 0x14, 0x18, 0x7C, // q
		0x7C, 0x08, 0x04, 0x04, 0x08, // r
		0x48, 0x54, 0x54, 0x54, 0x20, // s
		0x04, 0x3F, 0x44, 0x40, 0x20, // t
		0x3C, 0x40, 0x40, 0x20, 0x7C, // u
		0x1C, 0x20, 0x40, 0x20, 0x1C, // v
		0x3C, 0x40, 0x30, 0x40, 0x3C, // w
		0x44, 0x28, 0x10, 0x28, 0x44, // x
		0x0C, 0x50, 0x50, 0x50, 0x3C, // y
		0x44, 0x64, 0x54, 0x4C, 0x44, // z
		0x00, 0x08, 0x36, 0x41, 0x00, // {
		0x00, 0x00, 0x7F, 0x00, 0x00, // |
		0x00, 0x41, 0x36, 0x08, 0x00, // }
		0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
		0x08, 0x1C, 0x2A, 0x08, 0x08, // <-
	}
}
